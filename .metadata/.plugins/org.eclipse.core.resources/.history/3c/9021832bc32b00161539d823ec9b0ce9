'''
Created on May 26, 2016

@author: Gianni
'''

from tkinter import *
from Tour import Tour
from tkinter.messagebox import showinfo
import webbrowser

class TourGui():
    
    def __init__(self):
        'Constructor, also builds the GUI'
        
        # Starts GUI
        root = Tk()
        root.wm_title('Tour')
        
        # Left Frame
        leftFrame = Frame(root)
        
        # Top Frame
        topFrame = Frame(leftFrame, pady = 10, padx = 20)
        orLabel = Label(topFrame, text = 'Origin').pack()
        self.orEntry = Entry(topFrame, width = 28, relief = SUNKEN, borderwidth = 3)
        self.orEntry.pack()
        desLabel = Label(topFrame, text = 'Destination').pack()
        self.desEntry = Entry(topFrame, width = 28, relief = SUNKEN, borderwidth = 3)
        self.desEntry.pack()
        mdLabel = Label(topFrame, text = 'Mode').pack()
        self.mdEntry = Entry(topFrame, width = 28, relief = SUNKEN, borderwidth = 3)
        self.mdEntry.pack()
        
        # Settings Frame
        setLabel = Label(topFrame, text = 'Map Settings', pady = 10).pack()
        settingsFrame = Frame(topFrame, pady = 10)
        zmLabel = Label(settingsFrame, text = 'Zoom:').grid(row = 0, column = 0)
        self.zmEntry = Entry(settingsFrame, width = 6, relief = SUNKEN, borderwidth = 3)
        self.zmEntry.grid(row = 0, column = 1)
        self.zmEntry.insert(0, '4')
        zmPlButton = Button(settingsFrame, relief = RAISED, text = '+', width = 2, command = self.zmPl).grid(row = 0, column = 2)
        zmMnButton = Button(settingsFrame, relief = RAISED, text = '-', width = 2, command = self.zmMn).grid(row = 0, column = 3)

        vdimLabel = Label(settingsFrame, text = 'Height:').grid(row = 1, column = 0)
        self.vdimEntry = Entry(settingsFrame, width = 6, relief = SUNKEN, borderwidth = 3)
        self.vdimEntry.grid(row = 1, column = 1)
        self.vdimEntry.insert(0, '480')
        vdimPlButton = Button(settingsFrame, relief = RAISED, text = '+', width = 2, command = self.vdimPl).grid(row = 1, column = 2)
        vdimMnButton = Button(settingsFrame, relief = RAISED, text = '-', width = 2, command = self.vdimMn).grid(row = 1, column = 3)

        hdimLabel = Label(settingsFrame, text = 'Width:').grid(row = 2, column = 0)
        self.hdimEntry = Entry(settingsFrame, width = 6, relief = SUNKEN, borderwidth = 3)
        self.hdimEntry.grid(row = 2, column = 1)
        self.hdimEntry.insert(0, '480')
        hdimPlButton = Button(settingsFrame, relief = RAISED, text = '+', width = 2).grid(row = 2, column = 2)
        hdimMnButton = Button(settingsFrame, relief = RAISED, text = '-', width = 2).grid(row = 2, column = 3)
        settingsFrame.pack(side = BOTTOM)
        
        topFrame.pack()
        
        # Bottom Frame
        botFrame = Frame(leftFrame, pady = 10, padx = 20)
        distLabel = Label(botFrame, text = 'Distance (m)').pack()
        self.distEntry = Entry(botFrame, width = 28, relief = SUNKEN, borderwidth = 3)
        self.distEntry.pack()
        durLabel = Label(botFrame, text = 'Duration (Datetime)').pack()
        self.durEntry = Entry(botFrame, width = 28, relief = SUNKEN, borderwidth = 3)
        self.durEntry.pack()
        buttonFrame = Frame(botFrame, pady = 5)
        distButton = Button(buttonFrame, relief = RAISED, width = 14, text = 'Get Distance', command = self.onClick).pack(side = BOTTOM)
        buttonFrame.pack(side = BOTTOM)
        botFrame.pack()
        leftFrame.pack(side = LEFT)
        
        #Right Frame
        rightFrame = Frame(root, width = 320, height = 320)
        self.showUrl = Text(rightFrame)
        self.showUrl.pack(fill = BOTH)
        rightFrame.pack(side = RIGHT)
        
        # Main Loop
        root.mainloop()
        
    def zmPl(self):
        if (self.zmEntry.get().isdigit()):
            zmLevel = int(self.zmEntry.get())
            zmLevel += 1
            if (zmLevel < 1):
                self.zmEntry.delete(0, END)
                self.zmEntry.insert(0, '1')
            elif (zmLevel > 10):
                self.zmEntry.delete(0, END)
                self.zmEntry.insert(0, '10')
            else:
                self.zmEntry.delete(0, END)
                self.zmEntry.insert(0, zmLevel)
        else:
            showinfo(title = 'Error: Invalid Zoom!', message = 'Please enter a valid integer from 1 to 10 in the zoom setting.')
            
    def zmMn(self):
        if (self.zmEntry.get().isdigit()):
            zmLevel = int(self.zmEntry.get())
            zmLevel -= 1
            if (zmLevel < 1):
                self.zmEntry.delete(0, END)
                self.zmEntry.insert(0, '1')
            elif (zmLevel > 10):
                self.zmEntry.delete(0, END)
                self.zmEntry.insert(0, '10')
            else:
                self.zmEntry.delete(0, END)
                self.zmEntry.insert(0, zmLevel)
        else:
            showinfo(title = 'Error: Invalid Zoom!', message = 'Please enter a valid integer from 1 to 10 in the zoom setting.')
            
    def vdimPl(self):
        if (self.vdimEntry.get().isdigit()):
            vdimLevel = int(self.vdimEntry.get())
            vdimLevel += 40
            if (vdimLevel < 320):
                self.vdimEntry.delete(0, END)
                self.vdimEntry.insert(0, '320')
            elif (vdimLevel > 640):
                self.vdimEntry.delete(0, END)
                self.vdimEntry.insert(0, '640')
            else:
                self.vdimEntry.delete(0, END)
                self.vdimEntry.insert(0, vdimLevel)
        else:
            showinfo(title = 'Error: Invalid Zoom!', message = 'Please enter a valid integer from 1 to 10 in the zoom setting.')
            
    def vdimMn(self):
        if (self.vdimEntry.get().isdigit()):
            vdimLevel = int(self.vdimEntry.get())
            vdimLevel -= 40
            if (vdimLevel < 320):
                self.vdimEntry.delete(0, END)
                self.vdimEntry.insert(0, '320')
            elif (vdimLevel > 640):
                self.vdimEntry.delete(0, END)
                self.vdimEntry.insert(0, '640')
            else:
                self.vdimEntry.delete(0, END)
                self.vdimEntry.insert(0, vdimLevel)
        else:
            showinfo(title = 'Error: Invalid Zoom!', message = 'Please enter a valid integer from 1 to 10 in the zoom setting.')
            
    def onClick(self):
        'Event handler tied to the "Get Distance" button'
        
        # Gets the entry fields
        origin = self.orEntry.get()
        destination = self.desEntry.get()
        mode = self.mdEntry.get()
        self.showUrl.delete(0.0, END)
        
        # List of allowed modes
        modeList = ['driving', 'biking', 'walking', '']
        
        # An error message pops up if either or both of the entry fields are empty
        if (origin == '' or destination == ''):
            showinfo(title = 'Error: Empty Fields!', message = 'Either or both of the Origin or Destination fields are empty.')
        
        # An error message pops up if the mode is either of the three types or empty
        elif (mode not in modeList):
            showinfo(title = 'Error: Invalid Mode!', message = 'Invalid mode. Valid modes are \'driving\', \'biking\', or \'walking\'.')
        
        # If neither of the errors are encountered, then proceeds to calculated distance
        else:
            
            # Builds an instance of the Tour class and calls its distance method
            aTour = Tour(origin, destination)
            retVal = aTour.distance(mode)
            
            # Separates the distance and the duration
            distance = retVal[0]
            duration = retVal[1]
            
            # Checks if distance is a number, and then inserts its value into distEntry
            if (distance.isdigit()):
                distance = int(distance)
                self.distEntry.delete(0, END)
                self.distEntry.insert(INSERT, '{:,}'.format(distance))
                
                # Inserts the url and automatically opens the map on the web browser
                self.showUrl.insert(0.0, aTour.map())
                webbrowser.open_new(aTour.map())
                
                # Here it inserts the duration into the durEntry after converting it
                if (duration.isdigit()):
                    duration = int(duration)
                    m, s = divmod(duration, 60)
                    h, m = divmod(m, 60)
                    d, h = divmod(h, 24)
                    duration =  ("%dd %dh %02dm %02ds" % (d, h, m, s))
                else:
                    duration = 0
            
                self.durEntry.delete(0, END)
                self.durEntry.insert(INSERT, duration)
                
            # If the value that is returned is a string, it prints it as an error message instead
            else:
                showinfo(title = 'Error: Distance not found!', message = distance)
                
TourGui()