'''
Created on May 26, 2016

@author: Gianni
'''

from tkinter import *
from Tour import Tour
from tkinter.messagebox import showinfo

class TourGui():
    
    def __init__(self):
        
        # Starts GUI
        root = Tk()
        root.wm_title('Tour')
        
        # Top Frame
        topFrame = Frame(root, pady = 10, padx = 20)
        orLabel = Label(topFrame, text = 'Origin').pack()
        self.orEntry = Entry(topFrame, width = 28, relief = SUNKEN, borderwidth = 3)
        self.orEntry.pack()
        desLabel = Label(topFrame, text = 'Destination').pack()
        self.desEntry = Entry(topFrame, width = 28, relief = SUNKEN, borderwidth = 3)
        self.desEntry.pack()
        mdLabel = Label(topFrame, text = 'Mode').pack()
        self.mdEntry = Entry(topFrame, width = 28, relief = SUNKEN, borderwidth = 3)
        self.mdEntry.pack()
        topFrame.pack()
        
        # Bottom Frame
        botFrame = Frame(root, pady = 10, padx = 20)
        distLabel = Label(botFrame, text = 'Distance (m)').pack()
        self.distEntry = Entry(botFrame, width = 28, relief = SUNKEN, borderwidth = 3)
        self.distEntry.pack()
        durLabel = Label(botFrame, text = 'Duration (s)').pack()
        self.durEntry = Entry(botFrame, width = 28, relief = SUNKEN, borderwidth = 3)
        self.durEntry.pack()
        buttonFrame = Frame(botFrame, pady = 5)
        distButton = Button(buttonFrame, relief = RAISED, width = 14, text = 'Get Distance', command = self.onClick).pack(side = BOTTOM)
        buttonFrame.pack(side = BOTTOM)
        botFrame.pack()
        
        # Main Loop
        root.mainloop()
            
    def onClick(self):
        
        # Gets the entry fields
        origin = self.orEntry.get()
        destination = self.desEntry.get()
        mode = self.mdEntry.get()
        
        # List of allowed modes
        modeList = ['driving', 'biking', 'walking', '']
        
        # An error message pops up if either or both of the entry fields are empty
        if (origin == '' or destination == ''):
            showinfo(title = 'Error: Empty Fields!', message = 'Either or both of the Origin or Destination fields are empty.')
        
        # An error message pops up if the mode is either of the three types or empty
        elif (mode not in modeList):
            showinfo(title = 'Error: Invalid Mode!', message = 'Invalid mode. Valid modes are \'driving\', \'biking\', or \'walking\'.')
        
        # If neither of the errors are encountered, then proceeds to calculated distance
        else:
            
            # Builds an instance of the Tour class and calls its distance method
            aTour = Tour(origin, destination)
            retVal = aTour.distance(mode)
            
            # Separates the distance and the duration
            distance = retVal[0]
            duration = retVal[1]
            
            # Checks if distance is a number, and then inserts its value into distEntry
            if (distance.isdigit()):
                distance = int(distance)
                self.distEntry.delete(0, END)
                self.distEntry.insert(INSERT, '{:,}'.format(distance))
                
                # Here it inserts the duration into the durEntry
                
                duration = int(duration)
                m, s = divmod(duration, 60)
                h, m = divmod(m, 60)
                d, h = divmod(h, 24)
                duration =  ("%dh %02dm %02ds" % (h, m, s))
                
                self.durEntry.delete(0, END)
                self.durEntry.insert(INSERT, duration)
                
            # If the value that is returned is a string, it prints it as an error message instead
            else:
                showinfo(title = 'Error: Distance not found!', message = distance)
                
TourGui()